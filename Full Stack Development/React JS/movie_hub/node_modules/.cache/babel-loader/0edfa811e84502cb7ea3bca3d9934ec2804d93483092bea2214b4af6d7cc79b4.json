{"ast":null,"code":"// import React, { useCallback, useEffect, useState } from \"react\";\n\n// import MoviesList from \"./components/MoviesList\";\n// import \"./App.css\";\n\n// function App() {\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   // //1]\n//   // const fetchMoviesHandler = () => {\n//   //   fetch(\"https://swapi.dev/api/films/\")\n//   //     .then((response) => {\n//   //       console.log(response.json);\n\n//   //       return response.json();\n//   //     })\n//   //     .then((data) => {\n//   //       const transformData = data.results.map((movie) => {\n//   //         return {\n//   //           id: movie.episode_id,\n//   //           title: movie.title,\n//   //           releaseDate: movie.release_date,\n//   //           openingText: movie.opening_crawl,\n//   //         };\n//   //       });\n//   //       setMovies(transformData);\n//   //     });\n//   // };\n\n//   const fetchMoviesHandler = useCallback(async() => {\n//     setIsLoading(true);\n//     setError(null);\n//     try {\n\n//       const response = await fetch(\"https://swapi.dev/api/films/\");\n\n//       if (!response.ok) {\n//         throw new Error(\"Something went wrong...\");\n//       }\n\n//       const data = await response.json();\n\n//       const transformData = data.results.map((movie) => {\n//         return {\n//           id: movie.episode_id,\n//           title: movie.title,\n//           releaseDate: movie.release_date,\n//           openingText: movie.opening_crawl,\n//         };\n//       });\n\n//       setMovies(transformData);\n//     } catch (error) {\n//       setError(error.message);\n//     }\n//     setIsLoading(false);\n//   }, []);\n\n//   // // if not use any other external state in the fetchMoviesHandler function then it's ok to pass empty dependencies array\n//   // // but if we use then we have to add a dependency\n//   // useEffect(() => {\n//   //   fetchMoviesHandler();\n//   // },[]);\n\n//   useEffect(() => {\n//     fetchMoviesHandler();\n//   }, [fetchMoviesHandler]);\n\n//   let content = <p>No Data Found</p>;\n\n//   if (movies.length > 0) {\n//     content = <MoviesList movies={movies} />;\n//   }\n\n//   if (error) {\n//     content = <p>{error}</p>;\n//   }\n\n//   if (isLoading) {\n//     content = <p>Loading....</p>;\n//   }\n\n//   return (\n//     <React.Fragment>\n//      <section>\n//         <AddMovie onAddMovie={addMovieHandler} />\n//       </section>\n//       <section>\n//         <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n//       </section>\n//       <section>{content}</section>\n//     </React.Fragment>\n//   );\n// }\n\n// export default App;\n\n// ____________________________________________________","map":{"version":3,"names":[],"sources":["/home/nimit/Propelius Technologies/Internship8thSem/Full Stack Development/React JS/movie_hub/src/App.js"],"sourcesContent":["// import React, { useCallback, useEffect, useState } from \"react\";\n\n// import MoviesList from \"./components/MoviesList\";\n// import \"./App.css\";\n\n// function App() {\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   // //1]\n//   // const fetchMoviesHandler = () => {\n//   //   fetch(\"https://swapi.dev/api/films/\")\n//   //     .then((response) => {\n//   //       console.log(response.json);\n\n//   //       return response.json();\n//   //     })\n//   //     .then((data) => {\n//   //       const transformData = data.results.map((movie) => {\n//   //         return {\n//   //           id: movie.episode_id,\n//   //           title: movie.title,\n//   //           releaseDate: movie.release_date,\n//   //           openingText: movie.opening_crawl,\n//   //         };\n//   //       });\n//   //       setMovies(transformData);\n//   //     });\n//   // };\n\n//   const fetchMoviesHandler = useCallback(async() => {\n//     setIsLoading(true);\n//     setError(null);\n//     try {\n\n//       const response = await fetch(\"https://swapi.dev/api/films/\");\n\n//       if (!response.ok) {\n//         throw new Error(\"Something went wrong...\");\n//       }\n\n//       const data = await response.json();\n\n//       const transformData = data.results.map((movie) => {\n//         return {\n//           id: movie.episode_id,\n//           title: movie.title,\n//           releaseDate: movie.release_date,\n//           openingText: movie.opening_crawl,\n//         };\n//       });\n\n//       setMovies(transformData);\n//     } catch (error) {\n//       setError(error.message);\n//     }\n//     setIsLoading(false);\n//   }, []);\n\n//   // // if not use any other external state in the fetchMoviesHandler function then it's ok to pass empty dependencies array\n//   // // but if we use then we have to add a dependency\n//   // useEffect(() => {\n//   //   fetchMoviesHandler();\n//   // },[]);\n\n//   useEffect(() => {\n//     fetchMoviesHandler();\n//   }, [fetchMoviesHandler]);\n\n//   let content = <p>No Data Found</p>;\n\n//   if (movies.length > 0) {\n//     content = <MoviesList movies={movies} />;\n//   }\n\n//   if (error) {\n//     content = <p>{error}</p>;\n//   }\n\n//   if (isLoading) {\n//     content = <p>Loading....</p>;\n//   }\n\n//   return (\n//     <React.Fragment>\n//      <section>\n//         <AddMovie onAddMovie={addMovieHandler} />\n//       </section>\n//       <section>\n//         <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n//       </section>\n//       <section>{content}</section>\n//     </React.Fragment>\n//   );\n// }\n\n// export default App;\n\n\n// ____________________________________________________\n\n"],"mappings":"AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA"},"metadata":{},"sourceType":"module","externalDependencies":[]}