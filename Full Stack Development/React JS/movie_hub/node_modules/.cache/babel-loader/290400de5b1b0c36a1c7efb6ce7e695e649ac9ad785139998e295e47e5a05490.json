{"ast":null,"code":"var _jsxFileName = \"/home/nimit/Propelius Technologies/Internship8thSem/Full Stack Development/React JS/movie_hub/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useCallback, useEffect, useState } from \"react\";\n\n// import MoviesList from \"./components/MoviesList\";\n// import \"./App.css\";\n\n// function App() {\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   // //1]\n//   // const fetchMoviesHandler = () => {\n//   //   fetch(\"https://swapi.dev/api/films/\")\n//   //     .then((response) => {\n//   //       console.log(response.json);\n\n//   //       return response.json();\n//   //     })\n//   //     .then((data) => {\n//   //       const transformData = data.results.map((movie) => {\n//   //         return {\n//   //           id: movie.episode_id,\n//   //           title: movie.title,\n//   //           releaseDate: movie.release_date,\n//   //           openingText: movie.opening_crawl,\n//   //         };\n//   //       });\n//   //       setMovies(transformData);\n//   //     });\n//   // };\n\n//   const fetchMoviesHandler = useCallback(async() => {\n//     setIsLoading(true);\n//     setError(null);\n//     try {\n\n//       const response = await fetch(\"https://swapi.dev/api/films/\");\n\n//       if (!response.ok) {\n//         throw new Error(\"Something went wrong...\");\n//       }\n\n//       const data = await response.json();\n\n//       const transformData = data.results.map((movie) => {\n//         return {\n//           id: movie.episode_id,\n//           title: movie.title,\n//           releaseDate: movie.release_date,\n//           openingText: movie.opening_crawl,\n//         };\n//       });\n\n//       setMovies(transformData);\n//     } catch (error) {\n//       setError(error.message);\n//     }\n//     setIsLoading(false);\n//   }, []);\n\n//   // // if not use any other external state in the fetchMoviesHandler function then it's ok to pass empty dependencies array\n//   // // but if we use then we have to add a dependency\n//   // useEffect(() => {\n//   //   fetchMoviesHandler();\n//   // },[]);\n\n//   useEffect(() => {\n//     fetchMoviesHandler();\n//   }, [fetchMoviesHandler]);\n\n//   let content = <p>No Data Found</p>;\n\n//   if (movies.length > 0) {\n//     content = <MoviesList movies={movies} />;\n//   }\n\n//   if (error) {\n//     content = <p>{error}</p>;\n//   }\n\n//   if (isLoading) {\n//     content = <p>Loading....</p>;\n//   }\n\n//   return (\n//     <React.Fragment>\n//      <section>\n//         <AddMovie onAddMovie={addMovieHandler} />\n//       </section>\n//       <section>\n//         <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n//       </section>\n//       <section>{content}</section>\n//     </React.Fragment>\n//   );\n// }\n\n// export default App;\n\n// ____________________________________________________\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://react-http-7a524-default-rtdb.firebaseio.com/movies.json\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n  const addMovieHandler = async movie => {\n    const response = await fetch(\"https://react-http-7a524-default-rtdb.firebaseio.com/movies.json\", {\n      method: \"POST\"\n    });\n  };\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no movies.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 17\n  }, this);\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }, this);\n  }\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(AddMovie, {\n        onAddMovie: addMovieHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/djrXmupudGJZ4TEuxAjJK8qFwI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","addMovieHandler","movie","method","content","children","fileName","_jsxFileName","lineNumber","columnNumber","length","Fragment","onAddMovie","onClick","_c","$RefreshReg$"],"sources":["/home/nimit/Propelius Technologies/Internship8thSem/Full Stack Development/React JS/movie_hub/src/App.js"],"sourcesContent":["// import React, { useCallback, useEffect, useState } from \"react\";\n\n// import MoviesList from \"./components/MoviesList\";\n// import \"./App.css\";\n\n// function App() {\n//   const [movies, setMovies] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   // //1]\n//   // const fetchMoviesHandler = () => {\n//   //   fetch(\"https://swapi.dev/api/films/\")\n//   //     .then((response) => {\n//   //       console.log(response.json);\n\n//   //       return response.json();\n//   //     })\n//   //     .then((data) => {\n//   //       const transformData = data.results.map((movie) => {\n//   //         return {\n//   //           id: movie.episode_id,\n//   //           title: movie.title,\n//   //           releaseDate: movie.release_date,\n//   //           openingText: movie.opening_crawl,\n//   //         };\n//   //       });\n//   //       setMovies(transformData);\n//   //     });\n//   // };\n\n//   const fetchMoviesHandler = useCallback(async() => {\n//     setIsLoading(true);\n//     setError(null);\n//     try {\n\n//       const response = await fetch(\"https://swapi.dev/api/films/\");\n\n//       if (!response.ok) {\n//         throw new Error(\"Something went wrong...\");\n//       }\n\n//       const data = await response.json();\n\n//       const transformData = data.results.map((movie) => {\n//         return {\n//           id: movie.episode_id,\n//           title: movie.title,\n//           releaseDate: movie.release_date,\n//           openingText: movie.opening_crawl,\n//         };\n//       });\n\n//       setMovies(transformData);\n//     } catch (error) {\n//       setError(error.message);\n//     }\n//     setIsLoading(false);\n//   }, []);\n\n//   // // if not use any other external state in the fetchMoviesHandler function then it's ok to pass empty dependencies array\n//   // // but if we use then we have to add a dependency\n//   // useEffect(() => {\n//   //   fetchMoviesHandler();\n//   // },[]);\n\n//   useEffect(() => {\n//     fetchMoviesHandler();\n//   }, [fetchMoviesHandler]);\n\n//   let content = <p>No Data Found</p>;\n\n//   if (movies.length > 0) {\n//     content = <MoviesList movies={movies} />;\n//   }\n\n//   if (error) {\n//     content = <p>{error}</p>;\n//   }\n\n//   if (isLoading) {\n//     content = <p>Loading....</p>;\n//   }\n\n//   return (\n//     <React.Fragment>\n//      <section>\n//         <AddMovie onAddMovie={addMovieHandler} />\n//       </section>\n//       <section>\n//         <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n//       </section>\n//       <section>{content}</section>\n//     </React.Fragment>\n//   );\n// }\n\n// export default App;\n\n// ____________________________________________________\n\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n\n\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://react-http-7a524-default-rtdb.firebaseio.com/movies.json\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  const addMovieHandler = async(movie) => {\n    const response = await fetch(\"https://react-http-7a524-default-rtdb.firebaseio.com/movies.json\",{\n      method: \"POST\",\n      \n    });  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}