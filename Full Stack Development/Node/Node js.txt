1. Node JS:
-> Node.js is an open-source,   ws developers to run JavaScript code server-side. It is built on the V8 JavaScript runtime engine, which is the same engine used by the Google Chrome browser to execute JavaScript code. Node.js enables the execution of JavaScript outside the browser, making it possible to develop server-side and networking applications.


2. npm vs npx

npm (Node Package Manager):
-> npm is primarily used for installing, managing, and sharing Node.js packages or modules.
-> It is used to download and install packages globally or locally, depending on the scope of the project.
-> npm is typically used to install dependencies for a project, manage versioning, and run scripts defined in the project's package.json file.

Example usage:
npm install <package-name>    # Install a package locally
npm install -g <package-name> # Install a package globally


npx (Node Package eXecute):
-> npx is a tool introduced with npm version 5.2.0 and later. It is designed to make it easy to execute Node.js binaries or commands without having to install them globally.
-> npx allows you to run binaries from locally installed packages without the need to install them globally. It downloads and executes the command, and then it cleans up after itself.
-> It is often used to run tools or commands provided by packages without explicitly installing those packages.
Example usage:
npx <command>         # Run a command from a locally installed package
npx create-react-app  # Create a new React app without installing create-react-app globally

3. npm Alternative:
-> yarn: Yarn is a package manager developed by Facebook, Google, and others. It aims to be a faster and more reliable alternative to npm.
-> pnpm: pnpm is another package manager that takes a different approach by using a single global storage for packages but creates links to them instead of copying.
-> nix: Nix is a powerful package manager that takes a unique approach by providing a purely functional and reproducible package management system.

4. package.json vs package-lock.json:

package.json:
-> package.json is a metadata file for a Node.js project. It contains information about the project, such as its name, version, description, entry points, scripts, and dependencies.
-> The dependencies section of package.json lists the project's runtime dependencies, while the devDependencies section lists dependencies needed only during development (like testing and build tools).
-> Developers can use npm or another package manager to install the dependencies listed in package.json using the npm install command.
Example package.json:
{
  "name": "my-node-project",
  "version": "1.0.0",
  "description": "A sample Node.js project",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.17.1"
  },
  "devDependencies": {
    "mocha": "^8.4.0"
  }
}


package-lock.json:
-> package-lock.json is automatically generated by npm and serves as a record of the exact versions of dependencies that were installed. It ensures that the project will have the same dependencies across different installations and environments.
-> The package-lock.json file includes information about each dependency, such as the version, a secure hash (integrity), and details about its dependencies. This guarantees that subsequent installations will use the exact same versions.
-> The package-lock.json file is particularly important for projects where consistency of dependencies is crucial, such as in a production environment or when collaborating with other developers.
Example excerpt from package-lock.json:
{
  "name": "my-node-project",
  "version": "1.0.0",
  "lockfileVersion": 1,
  "dependencies": {
    "express": {
      "version": "4.17.1",
      "resolved": "https://registry.npmjs.org/express/-/express-4.17.1.tgz",
      "integrity": "sha512-exiKtb4OTtP2bZc4KR7Ee1SN5HnO4Ofw7qDauGy8pAkvWc75sOGoxEFZkXf/WWZ/oxpzezZlNlB4vNFiwv2Zg==",
      "dev": true,
      "dependencies": {
        "accepts": "1.3.7",
        // ...
      },
      // ...
    },
    // ...
  },
  // ...
}

5. Node single threaded
-> Node.js is known to be a single-threaded runtime environment, meaning that a program’s code is executed line after line and there can’t be two lines of a program running at the same time.


